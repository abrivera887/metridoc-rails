version: 2.1

# Default slack config
default-slack-config: &default-slack-config
  channel: metridoc-notification
  failure_message: ":red_circle: Failure! ${CIRCLE_USERNAME}'s workflow (<${CIRCLE_BUILD_URL}|${CIRCLE_JOB}>) in <${GIT_URL}|${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}>, Message: ${GIT_COMMIT_DESC}"
  success_message: ":tada: Success! ${CIRCLE_USERNAME}'s workflow (<${CIRCLE_BUILD_URL}|${CIRCLE_JOB}>) in <${GIT_URL}|${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}>, Message: ${GIT_COMMIT_DESC}"
  webhook: ${SLACK_WEBHOOK}

orbs:
  docker-publish: upenn-libraries/docker-publish@0.1.0
  gitleaks: upenn-libraries/gitleaks@0.1.1
  slack: circleci/slack@3.4.2

commands:
  molecule_test:
    description: Run the `molecule test` command within a role directory
    parameters:
      role:
        description: Name of the Ansible role
        type: string
    steps:
      - run:
          command: molecule test
          working_directory: ansible/roles/<< parameters.role >>

jobs:
  deploy-production:
    docker:
      - image: gitlab.library.upenn.edu/docker/docker_ansible:2-9
    environment:
      GIT_URL: << pipeline.project.git_url >>/compare/<< pipeline.git.base_revision >>..<< pipeline.git.revision >>
      BASH_ENV: /etc/profile
    shell: /bin/sh -leo pipefail
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - ba:9a:a2:2e:b8:da:75:a7:94:d4:fc:42:4f:48:d5:9d
      - run:
          command: |
            echo "$SSH_BASTION_KNOWN_HOST" >> ~/.ssh/known_hosts
            echo "$DEPLOY_TARGET_KNOWN_HOST" >> ~/.ssh/known_hosts
            echo "$DEPLOY_TARGET_KNOWN_HOST_2" >> ~/.ssh/known_hosts
      - run:
          working_directory: ~/project/ansible
          command: |
            ansible-galaxy install -p roles -r roles/requirements.yml
      - run:
          working_directory: ~/project/ansible
          command: |
            ansible-playbook \
              -i inventories/production \
              -e "metridoc_image_tag=${CIRCLE_SHA1:0:7}" \
              -e "ansible_ssh_common_args='-qJ \"$SSH_BASTION_USER@$SSH_BASTION_HOST:$SSH_BASTION_PORT\"'" \
              -u deploy \
              -T 60 \
              --vault-id vault_password.py \
              production.yml
      - run:
          command: |
            apk add --update-cache --upgrade bash curl
            echo "export GIT_COMMIT_DESC='$(git --git-dir /root/project/.git log --format=%B -n 1 $CIRCLE_SHA1)'" >> $BASH_ENV
            source $BASH_ENV
      - slack/status: *default-slack-config
  deploy-staging:
    docker:
      - image: gitlab.library.upenn.edu/docker/docker_ansible:2-9
    environment:
      GIT_URL: << pipeline.project.git_url >>/compare/<< pipeline.git.base_revision >>..<< pipeline.git.revision >>
      BASH_ENV: /etc/profile
    shell: /bin/sh -leo pipefail
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - ba:9a:a2:2e:b8:da:75:a7:94:d4:fc:42:4f:48:d5:9d
      - run:
          command: |
            echo "$SSH_BASTION_KNOWN_HOST" >> ~/.ssh/known_hosts
            echo "$DEPLOY_TARGET_KNOWN_HOST_STAGING" >> ~/.ssh/known_hosts
      - run:
          working_directory: ~/project/ansible
          command: |
            ansible-galaxy install -p roles -r roles/requirements.yml
      - run:
          working_directory: ~/project/ansible
          command: |
            ansible-playbook \
              -i inventories/staging \
              -e "metridoc_image_tag=${CIRCLE_SHA1:0:7}" \
              -e "ansible_ssh_common_args='-qJ \"$SSH_BASTION_USER@$SSH_BASTION_HOST:$SSH_BASTION_PORT\"'" \
              -u deploy \
              -T 60 \
              --vault-id vault_password.py \
              site.yml
      - run:
          command: |
            apk add --update-cache --upgrade bash curl
            echo "export GIT_COMMIT_DESC='$(git --git-dir /root/project/.git log --format=%B -n 1 $CIRCLE_SHA1)'" >> $BASH_ENV
            source $BASH_ENV
      - slack/status: *default-slack-config
  test_role:
    description: Test an Ansible role using Molecule
    parameters:
      role:
        description: Name of the Ansible role
        type: string
    docker:
      - image: quay.io/ansible/molecule:2.22rc3
    steps:
      - checkout
      - setup_remote_docker
      - molecule_test:
          role: << parameters.role >>

workflows:
  build_test_and_deploy:
    jobs:
      - gitleaks/check_local:
          image: quay.io/upennlibraries/gitleaks:v2.0.0
          options: --redact --config=${CIRCLE_WORKING_DIRECTORY}/.gitleaks.toml --branch=${CIRCLE_BRANCH}
      - docker-publish/publish:
          name: publish_metridoc
          context: quay.io
          registry: quay.io
          image: upennlibraries/metridoc
          label_prefix: edu.upenn.library
          requires:
            - gitleaks/check_local
      - docker-publish/publish:
          name: publish_metridoc_python_jobs
          context: quay.io
          registry: quay.io
          image: upennlibraries/metridoc-python-jobs
          dockerfile: ./ansible/roles/python_jobs_manager/files/src/Dockerfile
          path: ./ansible/roles/python_jobs_manager/files/src
          label_prefix: edu.upenn.library
          requires:
            - gitleaks/check_local
      - docker-publish/publish:
          name: publish_metridoc_ezpaarse
          context: quay.io
          registry: quay.io
          image: upennlibraries/metridoc-ezpaarse
          dockerfile: ./ansible/roles/ezpaarse_manager/files/ezpaarse/Dockerfile
          path: ./ansible/roles/ezpaarse_manager/files/ezpaarse
          label_prefix: edu.upenn.library
          requires:
            - gitleaks/check_local
      - docker-publish/publish:
          name: publish_metridoc_ezpaarse_mongodb
          context: quay.io
          registry: quay.io
          image: upennlibraries/metridoc-ezpaarse-mongodb
          dockerfile: ./ansible/roles/ezpaarse_manager/files/mongodb/Dockerfile
          path: ./ansible/roles/ezpaarse_manager/files/mongodb
          label_prefix: edu.upenn.library
          requires:
            - gitleaks/check_local
      #- test_role:
      #    name: test_jenkins_manager_role
      #    role: jenkins_manager
      #    requires:
      #      - gitleaks/check_local
      #- test_role:
      #    name: test_metridoc_manager_role
      #    role: metridoc_manager
      #    requires:
      #      - gitleaks/check_local
      #- test_role:
      #    name: test_postgres_primary_manager_role
      #    role: postgres_primary_manager
      #    requires:
      #      - gitleaks/check_local
      #- test_role:
      #    name: test_postgres_replica_manager_role
      #    role: postgres_replica_manager
      #    requires:
      #      - gitleaks/check_local
      - deploy-production:
          filters:
            branches:
              only: master
          requires:
            - publish_metridoc
            - publish_metridoc_python_jobs
            - publish_metridoc_ezpaarse
            - publish_metridoc_ezpaarse_mongodb
            #- test_jenkins_manager_role
            #- test_metridoc_manager_role
            #- test_postgres_primary_manager_role
            #- test_postgres_replica_manager_role
      - deploy-staging:
          filters:
            branches:
              only: staging
          requires:
            - publish_metridoc
            - publish_metridoc_python_jobs
            - publish_metridoc_ezpaarse
            - publish_metridoc_ezpaarse_mongodb
            #- test_jenkins_manager_role
            #- test_metridoc_manager_role
            #- test_postgres_primary_manager_role
            #- test_postgres_replica_manager_role
